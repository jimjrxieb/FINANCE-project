# ============================================================================
# NGINX CONFIGURATION - INTENTIONALLY INSECURE
# ============================================================================
# PCI-DSS Violations:
# - Weak TLS versions (PCI 4.1)
# - Weak cipher suites (PCI 4.1)
# - Self-signed certificate (PCI 4.1.1)
# - No security headers (PCI 6.5.10)
# - No rate limiting (PCI 8.2.5)
# ============================================================================

events {
    worker_connections 1024;
}

http {
    # ❌ PCI 10.1: Basic logging (doesn't log enough detail)
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # ❌ PCI 6.5.5: Server version disclosure
    server_tokens on;

    # ==========================================================================
    # HTTP SERVER (SHOULD REDIRECT TO HTTPS BUT DOESN'T)
    # ==========================================================================
    server {
        listen 80;
        server_name securebank.local localhost;

        # ❌ PCI 4.1: HTTP allowed for payment API!
        # Should redirect all HTTP to HTTPS

        location / {
            proxy_pass http://api:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # ❌ PCI 8.2.5: No rate limiting
        }
    }

    # ==========================================================================
    # HTTPS SERVER (WEAK TLS CONFIGURATION)
    # ==========================================================================
    server {
        listen 443 ssl;
        server_name securebank.local localhost;

        # ========================================================================
        # TLS CONFIGURATION (SECURE - PCI-DSS COMPLIANT)
        # ========================================================================

        # ✅ PCI 4.1: Strong TLS versions only (TLS 1.2 and 1.3)
        # PCI-DSS requires TLS 1.2+ only
        ssl_protocols TLSv1.2 TLSv1.3;  # ✅ Only secure TLS versions

        # ✅ PCI 4.1: Strong modern cipher suites
        # ECDHE for forward secrecy, AES-GCM for AEAD
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';

        ssl_prefer_server_ciphers off;  # ✅ Let client choose (TLS 1.3 best practice)

        # ❌ PCI 4.1.1: Self-signed certificate (should use CA-signed)
        ssl_certificate /etc/nginx/certs/self-signed.crt;
        ssl_certificate_key /etc/nginx/certs/self-signed.key;

        # ❌ Weak DH parameters (should be 2048+)
        # ssl_dhparam /etc/nginx/certs/dhparam.pem;

        # ❌ Short session timeout
        ssl_session_timeout 5m;  # Should be shorter
        ssl_session_cache shared:SSL:10m;

        # ========================================================================
        # SECURITY HEADERS (SECURE CONFIGURATION)
        # ========================================================================

        # ✅ PCI 4.1: HSTS configured (force HTTPS for 1 year)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # ✅ PCI 6.5.10: Security headers enabled
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

        # ✅ Prevent HTTP/2 cleartext smuggling
        # Reject HTTP/2 upgrade requests on HTTP connection
        add_header Connection "close" always;

        # ⚠️ CORS for local development (restrict in production)
        add_header 'Access-Control-Allow-Origin' 'http://localhost:3001' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        # ========================================================================
        # PROXY CONFIGURATION
        # ========================================================================

        location / {
            # ❌ No WAF or application firewall

            proxy_pass http://api:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # ❌ PCI 8.2.5: No rate limiting on API endpoints
            # Should implement rate limiting to prevent brute force

            # ❌ No request size limits (DoS risk)
            client_max_body_size 100M;

            # ❌ Long timeouts (DoS risk)
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        # ========================================================================
        # DEBUG ENDPOINTS (SHOULD BE DISABLED)
        # ========================================================================

        # ❌ PCI 2.2.2: Debug endpoint exposed
        location /debug {
            proxy_pass http://api:3000/debug;
        }

        # ❌ Health check endpoint exposes system info
        location /health {
            proxy_pass http://api:3000/health;
        }
    }
}

# ============================================================================
# VIOLATION SUMMARY
# ============================================================================
# This Nginx configuration contains the following PCI-DSS violations:
#
# 1. PCI 4.1: Weak TLS versions (TLS 1.0, 1.1)
# 2. PCI 4.1: Weak cipher suites (DES, 3DES, RC4)
# 3. PCI 4.1.1: Self-signed certificate
# 4. PCI 4.1: No HSTS header
# 5. PCI 6.5.9: Missing CSRF protection headers
# 6. PCI 6.5.10: Missing security headers (CSP, X-Frame-Options, etc.)
# 7. PCI 8.2.5: No rate limiting
# 8. PCI 2.2.2: Debug endpoints exposed
# 9. PCI 6.6: No WAF or application firewall
#
# Total violations: 10+
# ============================================================================